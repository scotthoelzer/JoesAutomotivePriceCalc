/*
 * Chapter7Challenge6View.java
 */

package JoesAutomotivePriceCalc;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class JoesAutomotivePriceCalcView extends FrameView {

    public JoesAutomotivePriceCalcView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = JoesAutomotivePriceCalcApp.getApplication().getMainFrame();
            aboutBox = new JoesAutomotivePriceCalcAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        JoesAutomotivePriceCalcApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabelHours = new javax.swing.JLabel();
        jTextFieldHours = new javax.swing.JTextField();
        jCheckBoxMisc = new javax.swing.JCheckBox();
        jCheckBoxTire = new javax.swing.JCheckBox();
        jCheckBoxMuffler = new javax.swing.JCheckBox();
        jCheckBoxInspection = new javax.swing.JCheckBox();
        jCheckBoxTransmission = new javax.swing.JCheckBox();
        jCheckBoxRadiator = new javax.swing.JCheckBox();
        jCheckBoxLube = new javax.swing.JCheckBox();
        jCheckBoxOil = new javax.swing.JCheckBox();
        jButtonCalc = new javax.swing.JButton();
        jLabelTotal = new javax.swing.JLabel();
        jTextFieldTotal = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(JoesAutomotivePriceCalc.JoesAutomotivePriceCalcApp.class).getContext().getResourceMap(JoesAutomotivePriceCalcView.class);
        jLabelHours.setText(resourceMap.getString("jLabelHours.text")); // NOI18N
        jLabelHours.setName("jLabelHours"); // NOI18N

        jTextFieldHours.setText(resourceMap.getString("jTextFieldHours.text")); // NOI18N
        jTextFieldHours.setName("jTextFieldHours"); // NOI18N

        jCheckBoxMisc.setText(resourceMap.getString("jCheckBoxMisc.text")); // NOI18N
        jCheckBoxMisc.setName("jCheckBoxMisc"); // NOI18N

        jCheckBoxTire.setText(resourceMap.getString("jCheckBoxTire.text")); // NOI18N
        jCheckBoxTire.setName("jCheckBoxTire"); // NOI18N

        jCheckBoxMuffler.setText(resourceMap.getString("jCheckBoxMuffler.text")); // NOI18N
        jCheckBoxMuffler.setName("jCheckBoxMuffler"); // NOI18N

        jCheckBoxInspection.setText(resourceMap.getString("jCheckBoxInspection.text")); // NOI18N
        jCheckBoxInspection.setName("jCheckBoxInspection"); // NOI18N

        jCheckBoxTransmission.setText(resourceMap.getString("jCheckBoxTransmission.text")); // NOI18N
        jCheckBoxTransmission.setName("jCheckBoxTransmission"); // NOI18N

        jCheckBoxRadiator.setText(resourceMap.getString("jCheckBoxRadiator.text")); // NOI18N
        jCheckBoxRadiator.setName("jCheckBoxRadiator"); // NOI18N

        jCheckBoxLube.setText(resourceMap.getString("jCheckBoxLube.text")); // NOI18N
        jCheckBoxLube.setName("jCheckBoxLube"); // NOI18N

        jCheckBoxOil.setText(resourceMap.getString("jCheckBoxOil.text")); // NOI18N
        jCheckBoxOil.setName("jCheckBoxOil"); // NOI18N

        jButtonCalc.setText(resourceMap.getString("jButtonCalc.text")); // NOI18N
        jButtonCalc.setName("jButtonCalc"); // NOI18N
        jButtonCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcActionPerformed(evt);
            }
        });

        jLabelTotal.setText(resourceMap.getString("jLabelTotal.text")); // NOI18N
        jLabelTotal.setName("jLabelTotal"); // NOI18N

        jTextFieldTotal.setEditable(false);
        jTextFieldTotal.setText(resourceMap.getString("jTextFieldTotal.text")); // NOI18N
        jTextFieldTotal.setName("jTextFieldTotal"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxOil)
                    .addComponent(jCheckBoxLube)
                    .addComponent(jCheckBoxRadiator)
                    .addComponent(jCheckBoxTransmission)
                    .addComponent(jCheckBoxInspection)
                    .addComponent(jCheckBoxMuffler)
                    .addComponent(jCheckBoxTire)
                    .addComponent(jCheckBoxMisc)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonCalc)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelTotal)
                                .addComponent(jLabelHours)))
                        .addGap(30, 30, 30)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldHours)
                            .addComponent(jTextFieldTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jCheckBoxOil)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxLube)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRadiator)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxTransmission)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxInspection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxMuffler)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxTire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxMisc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHours)
                    .addComponent(jTextFieldHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jButtonCalc)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelTotal))
                    .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(JoesAutomotivePriceCalc.JoesAutomotivePriceCalcApp.class).getContext().getActionMap(JoesAutomotivePriceCalcView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>

//constants for charges for services
    public static final double OIL = 26, LUBE = 18, RADIATOR = 30, 
            TRANSMISSION = 80, INSPECTION = 15, MUFFLER = 100, TIRE = 20, 
            HOURLY = 20;
    
private void jButtonCalcActionPerformed(java.awt.event.ActionEvent evt) {                                            
    
    //allows for proper display of currency values    
    NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();
    
    String miscHours;
    double total = 0, hours, hoursCharge;
 
//performs checks to see if checkboxes are selected.  When they are, adds 
//appropriate amount to the total charge    
    if (jCheckBoxInspection.isSelected()){
        total += INSPECTION;
    }
    if (jCheckBoxLube.isSelected()){
        total += LUBE;
    }
    if (jCheckBoxMuffler.isSelected()){
        total += MUFFLER;
    }
    if (jCheckBoxOil.isSelected()){
        total += OIL;
    }
    if (jCheckBoxRadiator.isSelected()){
        total += RADIATOR;
    }
    if (jCheckBoxTire.isSelected()){
        total += TIRE;
    }
    if (jCheckBoxTransmission.isSelected()){
        total += TRANSMISSION;
    }
    if (jCheckBoxMisc.isSelected()){
        miscHours = jTextFieldHours.getText();
        hours = Double.parseDouble(miscHours);
        hoursCharge = hours * HOURLY;
        total += hoursCharge;
    }
    
//displays result in jTextFieldTotal;  
     jTextFieldTotal.setText(currencyFormatter.format(total).toString());
}                                           

    // Variables declaration - do not modify
    private javax.swing.JButton jButtonCalc;
    private javax.swing.JCheckBox jCheckBoxInspection;
    private javax.swing.JCheckBox jCheckBoxLube;
    private javax.swing.JCheckBox jCheckBoxMisc;
    private javax.swing.JCheckBox jCheckBoxMuffler;
    private javax.swing.JCheckBox jCheckBoxOil;
    private javax.swing.JCheckBox jCheckBoxRadiator;
    private javax.swing.JCheckBox jCheckBoxTire;
    private javax.swing.JCheckBox jCheckBoxTransmission;
    private javax.swing.JLabel jLabelHours;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JTextField jTextFieldHours;
    private javax.swing.JTextField jTextFieldTotal;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
